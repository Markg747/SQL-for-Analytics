USE AdventureWorks2017

/** 1.
Write SQL queries to gather employees' first and last names alongside their 
corresponding job titles from the Employee table.**/

SELECT FirstName, LastName, JobTitle 
FROM [Person].[Person] 
INNER JOIN [HumanResources].[Employee] 
ON [HumanResources].[Employee].BusinessEntityID = [Person].[Person].BusinessEntityID;

/**2.
Write SQL queries to calculate the total number of orders placed by discerning customers
from the SalesOrderHeader table.**/

SELECT COUNT (DISTINCT SalesOrderID) AS TotalOrders FROM [Sales].[SalesOrderHeader];

/**3.
Write SQL queries to compute the average price of products sold based on sales data
from the SalesOrderDetail table.**/

SELECT AVG(LineTotal) AS AverageSales FROM [Sales].[SalesOrderDetail];

/**4.
Write SQL queries to discern the top 5 customers based on their total order amounts
extracted from the SalesOrderHeader table.**/

SELECT TOP 5 CustomerID, COUNT(CustomerID) AS TotalOrderAmount
FROM [Sales].[SalesOrderHeader] GROUP BY CustomerID ORDER BY TotalOrderAmount DESC;

/**5.
Write SQL queries to fetch a comprehensive list of products along with their respective
categories from the Product and ProductCategory tables.**/

SELECT [Production].[Product].Name AS ProductName, 
[Production].[ProductSubcategory].Name AS SubCategoryName,
[Production].[ProductCategory].Name AS CategoryName
FROM [Production].[Product]
INNER JOIN [Production].[ProductSubcategory] 
ON [Production].[Product].ProductSubcategoryID = [Production].[ProductSubcategory].ProductSubcategoryID
INNER JOIN [Production].[ProductCategory]
ON [Production].[ProductSubcategory].ProductCategoryID  = [Production].[ProductCategory].ProductCategoryID
ORDER BY CategoryName;

/**6.
Write SQL queries to display the minimum and maximum order quantities for each
product from the SalesOrderDetail table.**/

SELECT ProductID, MIN(OrderQty) AS Minimum, MAX(OrderQty) AS Maximum 
FROM [Sales].[SalesOrderDetail]
GROUP BY ProductID;

/**7.
Write SQL queries to calculate the total sales amount for each calendar year from the
SalesOrderHeader table.**/

SELECT YEAR(Orderdate) AS Year, SUM(TotalDue) AS TotalSales FROM [Sales].[SalesOrderHeader]
GROUP BY YEAR(OrderDate);

/**8.
Write SQL queries to retrieve products with stock levels below 100 units from the
Product table.**/
SELECT Name AS ProductName FROM  [Production].[Product] WHERE SafetyStockLevel < 100;

/**9.
Write SQL queries to identify customers who have placed orders but haven't provided
their email addresses from the Customer and SalesOrderHeader tables.**/



/**10.
Write SQL queries to calculate the total sales amount for each product category from the
SalesOrderDetail and ProductCategory tables.**/

SELECT [Production].[Product].[Name],SUM(LineTotal) TotalSales
FROM [Production].[Product]
INNER JOIN [Sales].[SalesOrderDetail]
ON [Production].[Product].[ProductID] = [Sales].[SalesOrderDetail].[ProductID]
GROUP BY [Production].[Product].[Name]

/**11.
Write SQL queries to determine the total sales amount generated by each representative
from the SalesOrderHeader and SalesPerson tables.**/

SELECT SalesPersonID, SUM(TotalDue) TotalSales FROM [Sales].[SalesOrderHeader]
GROUP BY SalesPersonID;

/**12.
Write SQL queries to identify customers who have made multiple orders within the last
six months from the Customer and SalesOrderHeader tables.**/

SELECT CustomerID, COUNT(SalesOrderID) AS TotalSales FROM [Sales].[SalesOrderHeader]
WHERE OrderDate > DATEADD(MONTH, -6, '2014-06-30')
GROUP BY CustomerID
HAVING COUNT(SalesOrderID) > 1;


/**13.
Write SQL queries to calculate the profit margin for each product based on sales and
cost data from the SalesOrderDetail and Product tables.**/

SELECT [Production].[Product].Name,
SUM(LineTotal) AS revenue, 
SUM((UnitPrice - StandardCost) * OrderQty) AS Profit,
(SUM((UnitPrice - StandardCost) * OrderQty) / SUM(LineTotal)) * 100 AS Margin
FROM [Production].[Product]
INNER JOIN [Sales].[SalesOrderDetail] 
ON [Sales].[SalesOrderDetail].ProductID = [Production].[Product].ProductID
GROUP BY [Production].[Product].Name;

/**14.
Write SQL queries to analyze historical data and identify vendors with consistently
prompt delivery performance from the Vendor and PurchaseOrderHeader tables.**/

 SELECT VendorID, AVG(DATEDIFF(DAY, OrderDate, ShipDate)) AS DeliveryTime 
 FROM [Purchasing].[PurchaseOrderHeader]
 GROUP BY VendorID
 ORDER BY DeliveryTime;

 /**15.
 Write SQL queries to extract and analyze temporal patterns in sales data from the
SalesOrderHeader table.**/

--Days
SELECT OrderDate AS Day, SUM(TotalDue) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY OrderDate
ORDER BY OrderDate;

--For Months
SELECT MONTH(OrderDate) AS Month,year(OrderDate) AS Year, SUM (TotalDue) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY MONTH(OrderDate),year(OrderDate)
ORDER BY YEAR(OrderDate), MONTH(OrderDate);

--For Years
SELECT YEAR(OrderDate) AS Year, SUM(TotalDue) AS TotalSales
FROM Sales.SalesOrderHeader
GROUP BY YEAR(OrderDate)
ORDER BY Year(OrderDate);


	
